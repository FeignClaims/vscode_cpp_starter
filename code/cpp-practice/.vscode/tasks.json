{
  "tasks": [
    {
      "label": "CMake: build the active target",
      "type": "shell",
      "command": "cmake",
      "args": [
        "--build",
        "build",
        "--config",
        "${command:cmake.buildType}",
        "--target",
        "${command:cmake.buildTargetName}",
        "-j"
      ],
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      }
    },
    {
      "type": "shell",
      "label": "Clang-Tidy: fix current file",
      "command": "clang-tidy",
      "args": ["--fix-errors", "${file}"],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "none",
      "presentation": {
        "echo": false,
        "reveal": "silent",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "type": "shell",
      "label": "Clang++: 编译单文件",
      "command": "clang++",
      "args": [
        "${file}",
        "-o",
        "${workspaceFolder}/build/test",
        "-g",
        "-pedantic",
        // 通常开启的警告
        "-Wall",
        "-Wextra", // reasonable and standard
        // 额外开启的警告
        "-Wextra-semi", // warn about semicolon after in-class function definition
        "-Wcast-align", // warn for potential performance problem casts
        // "-Wconversion", // warn on type conversions that may lose data
        "-Wdouble-promotion", // warn if float is implicit promoted to double
        "-Wformat=2", // warn on security issues around functions that format output (ie printf)
        "-Wimplicit-fallthrough", // warn on switch's case fallthrough without [[fallthrough]]
        // "-Wlifetime", //  (only special branch of Clang currently) shows object lifetime issues
        "-Wmisleading-indentation", // warn if indentation implies blocks where blocks do not exist
        "-Wmissing-noreturn",
        "-Wnon-virtual-dtor", // warn the user if a class with virtual functions has a non-virtual destructor. This helps catch hard to track down memory errors
        "-Wnull-dereference", // warn on dereference on null pointer/reference
        "-Wold-style-cast", // warn for c-style casts
        "-Woverloaded-virtual", // warn if you overload (not override) a virtual function
        "-Wpacked",
        "-Wpedantic", // warn if non-standard C++ is used
        // "-Wpointer-arith",
        "-Wshadow", // warn the user if a variable declaration shadows one from a parent context
        "-Wno-sign-conversion",
        // "-Wswitch-enum", // warn on enum values don't _explicitly_ handlded in switch statement
        "-Wunused", // warn on anything being unused
        // "-Wundef",
        "-pthread",
        "-fuse-ld=lld",
        // "-fsanitize=address",
        // "-fsanitize=undefined",
        "-stdlib=libc++",
        "-std=c++2b"
      ],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      }
    },
    {
      "type": "shell",
      "label": "Clang++: 编译多文件",
      "command": "clang++",
      "args": [
        "${fileDirname}/*.cpp",
        "-o",
        "${workspaceFolder}/build/test",
        "-g",
        "-pedantic",
        "-Wall",
        "-Wextra",
        "-Wcast-align",
        "-Wconversion",
        "-Wdouble-promotion",
        "-Wformat=2",
        "-Wimplicit-fallthrough",
        // "-Wlifetime",
        "-Wmisleading-indentation",
        "-Wmissing-noreturn",
        "-Wnon-virtual-dtor",
        "-Wnull-dereference",
        "-Wold-style-cast",
        "-Woverloaded-virtual",
        "-Wpacked",
        "-Wpedantic",
        "-Wshadow",
        "-Wno-sign-conversion",
        // "-Wswitch-enum",
        "-Wunused",
        // "-Wundef",
        "-pthread",
        "-fuse-ld=lld",
        // "-fsanitize=address",
        // "-fsanitize=undefined",
        "-stdlib=libc++",
        "-std=c++2b"
      ],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      }
    },
    {
      "type": "shell",
      "label": "运行文件",
      "command": "${workspaceFolder}/build/test",
      "args": [],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      }
    },
    {
      "type": "shell",
      "label": "Clang++: 编译并运行单文件",
      "command": "${workspaceFolder}/test",
      "args": [],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": {
        "kind": "test",
        "isDefault": true
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "dependsOn": ["Clang++: 编译单文件"]
    },
    {
      "type": "shell",
      "label": "Clang++: 编译并运行多文件",
      "command": "${workspaceFolder}/build/test",
      "args": [],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "dependsOn": ["Clang++: 编译单文件"]
    }
  ],
  "version": "2.0.0"
}

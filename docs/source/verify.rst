#############
4.检验配置结果
#############


打开 ``test/main.cpp``。

观察诊断信息
***********

观察 ``int main()`` 函数内的 ``int x{};``， ``x`` 下方应有黄线。

- 黄色的信息为警告，表示代码写得可能不够好。

  - 其中一些黄色警告是由 clang-tidy 给出的，这种一般会在警告信息最后给出一个蓝色链接，点击会转到一个网页，解释为什么有这个警告以及如何修复。
  - 如果想要抑制 clang-tidy 产生的警告警告，则用 ``// NOLINT`` 可以抑制该行警告，用 ``// NOLINTNEXTLINE`` 抑制下一行警告，用 ``// NOLINTBEGIN`` 和 ``// NOLINTEND`` 抑制它们之间的警告。这些都是抑制 clang-tidy 相关所有警告，如果想要抑制一部分，参考官方文档 `Clang-Tidy 抑制诊断的方法`_参考 `Clang-Tidy 抑制诊断的方法`_。

- 红色的信息为错误，表示代码无法运行。

.. figure:: /_img/诊断信息示例.png

  诊断信息

通过 Code Runner 插件运行
************************

点击右上角的【播放按钮】即可。

如果配置成功，应输出 ``true``。

.. figure:: /_img/运行结果示例.png

   运行结果

调试
*****

1. 点击左边侧边栏的播放按钮，切换到【运行和调试】界面。
2. 点击上方【下箭头】选择调试任务。
3. 点击【绿色播放按钮】开始调试。

我所配置好的四种调试任务：

- ``(lldb) CMake``：CMake 项目所用的调试任务，新手不必考虑，详见 :doc:`special_announcement`。
- ``生成和调试单文件``：顾名思义，会编译单个 cpp 文件。
- ``生成和调试多文件``：会编译当前选择的文件所在目录下的所有 cpp 文件。
- ``调试已编译的 test.exe``：调试以下方式所生成的最新文件。

  - ``生成和调试单/多文件`` 所生成的文件。
  - 组成这两个调试任务的 **任务** 所生成的文件。（在 ``.vscode/tasks.json`` 文件中，请自行查询。）
  - Code Runner 运行所生成的文件。

如果配置成功，应输出 `true`。

.. figure:: /_img/调试.png

   调试操作步骤
